#version 450

layout(push_constant) uniform pushBlock {
      int total;
      int vocab_size;
      int hidden_size;
      int output_size;
      int input_offset;
      int weight_offset;
      int output_offset;
} p;

layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;

layout (binding = 0) readonly buffer ssbA {
    float U[];
};

layout (binding = 1) readonly buffer ssbB {
    float V[];
};

layout (binding = 2) readonly buffer ssbC {
    float W[];
};

layout (binding = 3) readonly buffer ssbD {
    float A[];
};

layout (binding = 4) readonly buffer ssbE {
    float B[];
};

layout(binding = 5) readonly buffer ssbF{
	 float C[];
};

layout (binding = 6) readonly buffer ssbG {
    float bias[];
};

layout (binding = 7) readonly buffer ssbH {
    float bias2[];
};

layout (binding = 8) buffer ssbI {
    float D[];
};

layout (binding = 9) buffer ssbJ {
    float E[];
};

layout (binding = 10) buffer ssbK {
    float G[];
};

void gemm_1(){
   	for (uint globalRow = gl_GlobalInvocationID.x; globalRow < p.hidden_size; globalRow += gl_NumWorkGroups.x * gl_WorkGroupSize.x){
      	float i = bias[globalRow*4 + 0];
        float f = bias[globalRow*4 + 1];
        float g = bias[globalRow*4 + 2];
        float o = bias[globalRow*4 + 3];
        
        for (uint k=0u; k < p.vocab_size; ++k){
            i += U[k*p.hidden_size*4 + globalRow*4 + 0] * A[p.input_offset + k];
            f += U[k*p.hidden_size*4 + globalRow*4 + 1] * A[p.input_offset + k];
            g += U[k*p.hidden_size*4 + globalRow*4 + 2] * A[p.input_offset + k];
            o += U[k*p.hidden_size*4 + globalRow*4 + 3] * A[p.input_offset + k];            
        }

        for (uint k=0u; k < p.hidden_size; ++k){
            i += W[k*p.hidden_size*4 + globalRow*4 + 0] * B[p.weight_offset + k];
            f += W[k*p.hidden_size*4 + globalRow*4 + 1] * B[p.weight_offset + k];
            g += W[k*p.hidden_size*4 + globalRow*4 + 2] * B[p.weight_offset + k];
            o += W[k*p.hidden_size*4 + globalRow*4 + 3] * B[p.weight_offset + k];            
        } 

        i = 1/(1+exp(-i));
        f = 1/(1+exp(-f));
        g = tanh(g);
        o = 1/(1+exp(-o));

        float ct = f * C[p.weight_offset + globalRow] + i * g;
        G[p.weight_offset + globalRow] = ct;
        E[p.weight_offset + globalRow] = o * tanh(ct);
    }     
}

void gemm_2(){
   	for (uint globalRow = gl_GlobalInvocationID.y; globalRow < p.output_size; globalRow += gl_NumWorkGroups.y * gl_WorkGroupSize.y){
        float acc = bias2[globalRow];
        for (uint k=0u; k < p.hidden_size; ++k)
            acc += V[k*p.output_size + globalRow] * E[p.weight_offset + k];
        D[p.output_offset + globalRow] = 1.0/(1.0 + exp(-acc)); //sigmoid
    }         
}

void main(){
	gemm_1();
    barrier();
	gemm_2();
} 