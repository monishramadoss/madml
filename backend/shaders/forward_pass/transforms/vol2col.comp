#version 450

layout(push_constant) uniform pushBlock {
        int total;
	    int batchsize;
        int channels;
        float kernel_h;
        float kernel_w;
        float kernel_d;
        float pad_h;
        float pad_w;
        float pad_d;
        float stride_h;
        float stride_w;
        float stride_d;
        float dilation_h;
        float dilation_w;
        float dilation_d;
        float height_col; // height + 2 * pad_h - (dilation_h * (kernel_h - 1) + 1)) / stride_h + 1
        float width_col;  // width + 2 * pad_w - (dilation_w * (kernel_w - 1) + 1)) / stride_w + 1
        float depth_col;  // depth + 2 * pad_d - (dilation_d * (kernel_d - 1) + 1)) / stride_d + 1
        float height_vol;
        float width_vol;
        float depth_vol;
};

layout(binding = 0) buffer buf1 {
    float A[];
};

layout(binding = 1) buffer buf2 {
    float B[];
};

layout (local_size_x = 16, local_size_y = 64, local_size_z = 1) in;

void vol2col(){
    float n_output_plane = channels * kernel_h * kernel_w * kernel_d;
    uint elt = gl_GlobalInvocationID.y;
    if(elt >= batchsize)
        return;

    float data_vol = elt * channels * height_vol * width_vol * depth_vol;
    float data_col = elt * n_output_plane * height_col * width_col * depth_col;

    uint c_col = gl_GlobalInvocationID.x;
    if(c_col >= n_output_plane)
        return;

    uint w_offset = c_col % uint(kernel_w);
    uint h_offset = uint(c_col / kernel_w) % uint(kernel_h);
    uint d_offset = uint(c_col / kernel_w / kernel_h) % uint(kernel_d);
    uint c_vol = uint(c_col / kernel_w / kernel_h / kernel_d);

    for (uint d_col = 0; d_col < depth_col; ++d_col){
    	float d_vol = d_col * stride_d - pad_d + d_offset * dilation_d;
	    for (uint h_col = 0; h_col < height_col; ++h_col){
	        float h_vol = h_col * stride_h - pad_h + h_offset * dilation_h;
	        for (uint w_col = 0; w_col < width_col; ++w_col){
	            float w_vol = w_col * stride_w - pad_w + w_offset * dilation_w;
	            if (0 <= h_vol && h_vol < height_vol && 0 <= w_vol && w_vol < width_vol && 0 <= d_vol && d_vol < depth_vol){
                    uint data_col_idx = uint(floor(data_col + ((c_col * depth_col + d_col) * height_col + h_col) * width_col + w_col));
                    uint data_vol_idx = uint(floor(data_vol + ((c_vol * depth_vol + d_vol) * height_vol + h_vol) * width_vol + w_vol));
	                B[data_col_idx] = A[data_vol_idx];
	            }
	        }
		}
    }
}

void main(){
   vol2col();
}